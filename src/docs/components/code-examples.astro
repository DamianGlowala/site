---
import { dirname } from 'path';

import type { LazyCodeSnippet } from ':code_snippets';
import MockCodeEditor from '~/components/mocks/code-editor/mock-code-editor.astro';
import { codePreviews } from '~/stores/code-previews';
import { codeSnippets } from '~/stores/code-snippets';
import { currentJSLibrary } from '~/stores/libraries';
import { get } from 'svelte/store';

import CodePreviewLoader from './code-preview-loader.svelte';
import StylingSelect from './styling-select.svelte';

const { pathname } = Astro.url,
  jsLibDir = get(currentJSLibrary) === 'web-components' ? 'wc' : get(currentJSLibrary),
  id = pathname.slice(1).replace(`docs/${jsLibDir}`, 'docs').replace(/\/$/, ''),
  frameworkId = `${id}/examples/${jsLibDir}`,
  previews = findCodePreviews(id),
  files = resolveFiles(findCodeSnippets(frameworkId));

function findCodeSnippets(id: string) {
  return get(codeSnippets).filter((snippet) => snippet.id.includes(id));
}

function findCodePreviews(id: string) {
  return get(codePreviews).filter((preview) => preview.id.startsWith(id));
}

function resolveFiles(snippets: LazyCodeSnippet[]) {
  const paths: { path: string; snippet: string }[] = [];

  for (const snippet of snippets) {
    const path = snippet.id
      .replace(frameworkId, '')
      .replace(/\/(css|tailwind-css|default-theme)/, '/[$1]/example')
      .slice(1)
      .replace(/^\//, '');

    paths.push({
      path:
        snippet.id.includes('tailwind-css') && snippet.ext === 'js'
          ? `${dirname(path)}/tailwind.config`
          : `${path}.${snippet.ext}`,
      snippet: snippet.id + `.${snippet.ext}`,
    });
  }

  return paths;
}
---

<MockCodeEditor {files} title copy localStorage hidePreview={!previews.length}>
  <StylingSelect slot="toolbar" client:visible />
  {
    previews.length >= 1 ? (
      <Fragment slot="preview">
        {previews.map((preview) => (
          <CodePreviewLoader
            id={preview.id}
            path={
              previews.length > 1
                ? preview.id
                    .replace(id, '')
                    .replace(frameworkId, '')
                    .replace('/previews', '')
                    .replace(/\/\[preview\].*$/, '')
                : undefined
            }
            client:idle
          />
        ))}
      </Fragment>
    ) : null
  }
</MockCodeEditor>
