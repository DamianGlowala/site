---
import type { LazyCodeSnippet } from ':code_snippets';
import MockCodeEditor from '~/components/mocks/code-editor/mock-code-editor.astro';
import { codePreviews } from '~/stores/code-previews';
import { codeSnippets } from '~/stores/code-snippets';
import { currentJSLibrary } from '~/stores/libraries';
import { get } from 'svelte/store';

import CodePreviewLoader from './code-preview-loader.svelte';
import StylingSelect from './styling-select.svelte';

const { pathname } = Astro.url,
  jsLibDir = get(currentJSLibrary) === 'web-components' ? 'wc' : get(currentJSLibrary),
  id = pathname.slice(1).replace(`docs/${jsLibDir}`, 'docs').replace(/\/$/, ''),
  frameworkId = `${id}/examples/${jsLibDir}`,
  preview = findCodePreview(id),
  files = resolveFiles(findCodeSnippets(frameworkId));

function findCodeSnippets(id: string) {
  return get(codeSnippets).filter((snippet) => snippet.id.includes(id));
}

function findCodePreview(id: string) {
  return get(codePreviews).find((preview) => preview.id === id);
}

function resolveFiles(snippets: LazyCodeSnippet[]) {
  const paths: { path: string; snippet: string }[] = [];

  for (const snippet of snippets) {
    paths.push({
      path: `example.${snippet.ext}`,
      snippet: snippet.id + `.${snippet.ext}`,
    });
  }

  return paths;
}
---

<MockCodeEditor {files} title copy openFile={files[0]?.path} localStorage hidePreview={!preview}>
  <StylingSelect slot="toolbar" client:visible />
  {preview ? <CodePreviewLoader id={preview.id} client:visible slot="preview" /> : null}
</MockCodeEditor>
