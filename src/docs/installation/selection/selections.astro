---
import clsx from 'clsx';

import GradientBorder from '~/components/gradient-border.svelte';
import InfoPopup from '~/components/info-popup.astro';
import Style from '~/components/style/style.svelte';
import { isString } from '~/utils/unit';

import SelectionManager from './selection-manager.svelte';
import type { selections } from './selection-stores';

const gradients = {
  red: {
    style: '--from-color: oklch(0.62 0.23 25.86); --to-color: oklch(0.59 0.2 4.49);',
  },
  blue: {
    style: '--from-color: oklch(0.61 0.16 262.01); --to-color: oklch(0.81 0.15 217.11);',
    darkStyle: '--from-color: oklch(0.59 0.17 265.72); --to-color: oklch(0.63 0.13 217.76);',
  },
  green: {
    style: '--from-color: oklch(0.66 0.23 153.66); --to-color: oklch(0.66 0.15 203.58);',
  },
  orange: {
    style: '--from-color: oklch(0.69 0.16 48.76); --to-color: oklch(0.58 0.2 23.58);',
  },
  cyan: {
    style: '--from-color: oklch(0.81 0.15 217.11); --to-color: oklch(0.6 0.13 222.62);',
  },
};

interface Props {
  type: keyof typeof selections;
  label: string;
  param?: string;
  basePath?: string;
  options: {
    label: string;
    Info?: any;
    Icon: any;
    color?: keyof typeof gradients;
  }[];
}

const { pathname } = Astro.url,
  { type: store, label, param, options, basePath = '' } = Astro.props;
---

<SelectionManager {store} {param} client:load>
  <div
    class="grid gap-x-8 gap-y-10 grid-cols-2 576:grid-cols-3 1200:grid-cols-4 pt-4 pb-8"
    role={param ? 'listbox' : null}
    aria-label={label}
  >
    {
      options.map(({ label, Info, Icon, color }, i) => {
        const id = label.replace(' ', '-').toLowerCase(),
          isActive = !param && pathname.replace(/\/$/, '').endsWith(`/${id}`);

        const props = {
          class:
            'not-prose group hocus:text-[var(--from-color)] data-[active]:text-[var(--from-color)]',
          role: param ? 'option' : null,
          'data-option': '',
          'data-value': id,
          'data-active': isActive ? '' : null,
          tabindex: 0,
          style: 'box-shadow: none;',
        } as const;

        const contents = (
          <div class="relative">
            <GradientBorder class="rounded-md hidden group-hocus:inline group-data-[active]:inline" />
            <div
              class={clsx(
                'group-hocus:bg-elevate group-hocus:border-transparent flex items-center justify-center',
                'rounded-md bg-clip-padding border-2 border-border/90 font-medium',
                'font-mono group-data-[active]:border-transparent py-8 cursor-pointer',
                'group-data-[active]:bg-elevate',
              )}
            >
              <Icon class="w-[50px] h-[50px] shrink-0" />
            </div>
          </div>
        );

        const title = (
          <div
            class={clsx(
              'flex items-center justify-center font-medium text-center w-full pt-3 text-sm text-soft',
              'group-data-[active]:text-inverse group-hocus:text-inverse',
            )}
          >
            {label}
            {Info ? (
              <InfoPopup class="ml-1" label="More information" contain placement="bottom">
                {isString(Info) ? Info : <Info />}
              </InfoPopup>
            ) : null}
          </div>
        );

        return (
          <Style {...(color ? gradients[color] : {})} client:load>
            {param ? (
              <div {...props}>
                {contents}
                {title}
              </div>
            ) : (
              <div class="flex flex-col justify-center">
                <a {...props} href={`${basePath}/${id}`}>
                  {contents}
                </a>
                {title}
              </div>
            )}
          </Style>
        );
      })
    }
  </div>
</SelectionManager>
