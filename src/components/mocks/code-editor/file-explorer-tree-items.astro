---
import clsx from 'clsx';

import FileImageIcon from '~astro-icons/lucide/file-image';
import VideoFileIcon from '~astro-icons/lucide/file-video-2';

import CSSIcon from '../../../icons/css-icon.svelte';
import HTMLIcon from '../../../icons/html-icon.svelte';
import NextIcon from '../../../icons/logos/next-logo.svelte';
import NodeIcon from '../../../icons/logos/node-logo.svelte';
import ReactIcon from '../../../icons/logos/react-logo.svelte';
import TailwindIcon from '../../../icons/logos/tailwind-logo.svelte';
import TypescriptIcon from '../../../icons/logos/typescript-logo.svelte';
import FolderOpenIcon from '../../../icons/vscode-folder-open.svelte';
import FolderIcon from '../../../icons/vscode-folder.svelte';
import { ariaBool } from '../../../utils/aria';
import { getFileId, type EditorFileType, type EditorTreeItem } from './code-editor';

interface Props {
  id: number;
  depth: number;
  path?: string;
  items: EditorTreeItem[];
}

const Icons: Record<EditorFileType, any> = {
  dts: TypescriptIcon,
  next: NextIcon,
  pkg: NodeIcon,
  ts: TypescriptIcon,
  html: HTMLIcon,
  css: CSSIcon,
  jsx: ReactIcon,
  tsx: ReactIcon,
  tailwind: TailwindIcon,
  png: FileImageIcon,
  webp: FileImageIcon,
  mp4: VideoFileIcon,
};

function getIconSelectedColor(type: EditorFileType): string | undefined {
  switch (type) {
    case 'dts':
    case 'ts':
      return 'text-[#3178c6] dark:text-[#419bff]';
    case 'next':
      return 'text-inverse';
    case 'pkg':
      return 'text-[#4a7814] dark:text-[#83cd29]';
    case 'jsx':
    case 'tsx':
      return 'text-[#2aa7be] dark:text-[#00D8FF]';
    case 'tailwind':
      return 'text-[#06B6D4]';
    case 'png':
    case 'webp':
      return 'text-teal-600 dark:text-teal-500';
    case 'mp4':
      return 'text-indigo-600 dark:text-indigo-400';
    case 'html':
      return 'text-red-600 dark:text-red-400';
    case 'css':
      return 'text-blue-600 dark:text-blue-400';
  }
}

const { id, depth, path = '', items } = Astro.props;
---

{
  items.map((item) => {
    item.name = item.name.replace(/^\[\d*?\]/, '');

    if ('children' in item) {
      // Ignore filtered folder names ([css]).
      if (item.name.startsWith('[') && item.name.endsWith(']')) {
        return <Astro.self {id} {depth} items={item.children} path={`${path}/${item.name}`} />;
      }

      return (
        <ul
          class={clsx(
            'folder group parent flex-col space-y-0.5 mt-0.5 text-sm select-none ',
            depth > 0 && 'hidden parent-aria-[expanded]:flex',
          )}
          role="treeitem"
          aria-expanded={ariaBool(item.expanded)}
          data-path={`${path}/${item.name}`}
          tabindex="-1"
          style={`margin-left: ${depth * 0.3755}rem;`}
        >
          <div
            class={clsx(
              'rounded-sm flex items-center group-focus-visible:bg-brand/10 whitespace-nowrap',
              'text-soft/90 py-1 pl-2 pr-2 cursor-pointer border border-transparent',
              'hocus:text-inverse hocus:bg-brand/10 hocus:border-brand/90 hocus:shadow-sm',
            )}
            data-folder
          >
            <FolderIcon class="folder-icon w-4 h-4 mr-1.5" />
            <FolderOpenIcon class="folder-open-icon w-4 h-4 mr-1.5 hidden" />
            {item.name}
          </div>
          <Astro.self {id} depth={depth + 1} items={item.children} path={`${path}/${item.name}`} />
        </ul>
      );
    } else {
      const Icon = item.type && Icons[item.type],
        styling =
          'snippet' in item && item.snippet.includes('examples/')
            ? item.snippet.match(/css|default-theme|tailwind-css/)?.[0]
            : null;
      return (
        <li
          class={clsx(
            depth > 0 ? 'hidden parent-aria-[expanded]:flex' : 'flex',
            'rounded-sm group text-sm items-center mt-0.5 py-1 text-soft',
            'aria-selected:text-inverse cursor-pointer whitespace-nowrap',
            'aria-selected:font-medium select-none border border-transparent',
            'hocus:border-brand/90 hocus:bg-brand/10 hocus:text-inverse hocus:shadow-sm',
          )}
          role="treeitem"
          tabindex="-1"
          aria-selected={ariaBool(item.selected)}
          data-popup={getFileId(id, item.index)}
          data-path={`${path}/${item.name}`}
          data-styling={styling}
          style={`margin-left: ${depth * 0.375}rem;`}
        >
          {Icon && (
            <Icon
              class={clsx(
                'w-4 h-4 ml-2 mr-1.5',
                (item.type && getIconSelectedColor(item.type)) || 'text-inverse',
              )}
            />
          )}
          {item.name}
        </li>
      );
    }
  })
}

<style>
  .folder[aria-expanded='true'] > *:first-child {
    color: rgb(var(--color-inverse));
  }
</style>
