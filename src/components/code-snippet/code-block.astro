---
import clsx from 'clsx';

import type { HTMLAttributes } from 'astro/types';

import CodeBlockWrapper from './code-block-wrapper.svelte';
import CodeHighlightLines from './code-highlight-lines.astro';
import HMRCodeHighlightLines from './hmr/code-highlight-lines.svelte';
import HMRLineNumbers from './hmr/code-line-numbers.svelte';

interface Props extends Omit<HTMLAttributes<'div'>, 'style'> {
  id: string;
  title?: string;
  domId?: string | null;
  flat?: boolean;
  style?: string;
  numbered?: boolean;
  lines: number;
  highlights?: string;
}

const {
  id,
  domId,
  lines,
  title,
  highlights,
  numbered = false,
  flat = false,
  class: _class,
  style,
  ...htmlProps
} = Astro.props;

const showTopBar = !!title || Astro.slots.has('top-bar'),
  lineNumbers = [...Array(lines).keys()].map((n) => n + 1),
  lineNumberProps = {
    class: clsx(
      'flex m-0 flex-col text-sm leading-[var(--leading)] mr-4',
      'flex-none select-none text-right text-soft/40 items-center',
    ),
    style: 'border-radius: 0; padding-top: 0;',
    'aria-hidden': 'true',
    'data-numbers': true,
  } as const;
---

<CodeBlockWrapper
  {...htmlProps as any}
  id={domId}
  class={_class}
  {title}
  {flat}
  {style}
  {showTopBar}
>
  <slot name="top-bar" slot="top-bar" />
  {
    import.meta.env.DEV ? (
      <HMRCodeHighlightLines {id} {lines} {highlights} client:load />
    ) : (
      <CodeHighlightLines {lines} {highlights} />
    )
  }
  {
    numbered &&
      (import.meta.env.DEV ? (
        <HMRLineNumbers
          {id}
          {lines}
          {...lineNumberProps}
          class={lineNumberProps.class}
          client:load
        />
      ) : (
        <pre {...lineNumberProps} set:html={lineNumbers.join('\n')} />
      ))
  }
  <slot />
</CodeBlockWrapper>
